---
- hosts: localhost
  become: 'no'
  vars:
    user:
      # username: "swysocki"
      username: "scottw"
      ssh_pub_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKlnFHI5swpZl5FG+BINqcr0TcAuOhYl9isMxgGyXkFU primary"
      default_shell: "zsh"
      email: "swysocki@gmail.com"
      name: "Scott Wysocki"

  tasks:
    - name: set variables for Linux
      set_fact:
        home_path: "/home/{{ user.username }}"
        group_name: "{{ user.username }}"
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: set variables for Mac
      set_fact:
        home_path: "/Users/{{ user.username }}"
        group_name: staff
      when: ansible_os_family == "Darwin"

    - name: install common tools
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - git
        - tmux
        - neovim
        - ripgrep
        - fzf
        - htop
        - virtualenv
        - zsh
        - acl
        - python3-pip
        - python3-venv
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      become: 'yes'

    - name: install common tools macos
      community.general.homebrew:
        name: "{{ item }}"
      loop:
        - git
        - tmux
        - neovim
        - ripgrep
        - fzf
        - zsh
        - python3
        - pipx
      when: ansible_os_family == 'Darwin'

    - name: create users
      ansible.builtin.user:
        name: "{{ user.username }}"
        shell: "/bin/{{ user.default_shell }}"
        groups: sudo
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      become: 'yes'

    - name: set authorized keys
      ansible.posix.authorized_key:
        user: "{{ user.username }}"
        state: present
        key: "{{ user.ssh_pub_key }}"
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      become: 'yes'

    - name: allow passwordless sudo
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      become: 'yes'

    - name: add email to git config
      community.general.git_config:
        name: user.email
        scope: global
        value: "{{ user.email }}"
      become_user: "{{ user.username }}"

    - name: add username to git config
      community.general.git_config:
        name: user.name
        scope: global
        value: "{{ user.name }}"
      become_user: "{{ user.username }}"

    - name: check for omz installation
      ansible.builtin.stat:
        path: "{{ home_path }}/.oh-my-zsh"
      register: omz

    - name: install oh-my-zsh
      #ansible.builtin.shell:
      shell:
        cmd: wget -qO - https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash -
      become_user: "{{ user.username }}"
      when: user.default_shell == "zsh" and not omz.stat.exists

    - name: install auto-suggestion plugin
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      become_user: "{{ user.username }}"
      when: user.default_shell == "zsh"

    - name: install pipx using pip
      ansible.builtin.pip:
        name: pipx
        extra_args: --user
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: ensure pipx path
      ansible.builtin.shell:
        cmd: python3 -m pipx ensurepath
        executable: pip3
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: add pipx packages
      ansible.builtin.shell:
        cmd: "pipx install {{ item }}"
      become_user: "{{ user.username }}"
      ignore_errors: yes
      loop:
        - isort
        - pytest
        - black
        - flake8
        - poetry

    - name: add fzf settings for bash
      ansible.builtin.copy:
        dest: /etc/profile.d/fzf.sh
        content: |
          #!/bin/bash
          source /usr/share/doc/fzf/examples/key-bindings.bash
          source /usr/share/doc/fzf/examples/completion.bash
        owner: root
        group: root
        mode: '644'
      when: user.default_shell == "bash" and ansible_os_family == "Ubuntu"

    - name: install git bash prompt for existing users
      ansible.builtin.git:
        repo: https://github.com/magicmonty/bash-git-prompt.git
        dest: "{{ home_path }}/.bash-git-prompt"
        depth: 1
      when: user.default_shell == "bash"

    - name: add git bash prompt to bashrc
      ansible.builtin.copy:
        dest: /etc/profile.d/git-bash-prompt.sh
        content: |
          if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
            GIT_PROMPT_ONLY_IN_REPO=1
            GIT_PROMPT_THEME=Single_line_Minimalist
            source $HOME/.bash-git-prompt/gitprompt.sh
          fi
        owner: root
        group: root
        mode: '644'
      when: user.default_shell == "bash" and ansible_os_family == "Ubuntu"

    - name: create vim plug directory
      ansible.builtin.file:
        path: "{{ home_path }}/.local/share/nvim/site/autoload/"
        state: directory
        owner: "{{ user.username }}"
        group: "{{ group_name }}"

    - name: install vim plug for neovim
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{ home_path }}/.local/share/nvim/site/autoload/plug.vim"
        owner: "{{ user.username }}"
        group: "{{ group_name }}"

    - name: make nvim config directory
      ansible.builtin.file:
        path: "{{ home_path }}/.config/nvim/"
        state: directory
        owner: "{{ user.username }}"
        group: "{{ group_name }}"

    - name: clone dotfiles
      ansible.builtin.git:
        repo: https://github.com/swysocki/dotfiles
        dest: "{{ home_path }}/devel/repos/dotfiles"
        depth: 1
      become_user: "{{ user.username }}"

    - name: link neovim config
      ansible.builtin.file:
        src: "{{ home_path }}/devel/repos/dotfiles/.config/nvim/init.vim"
        dest: "{{ home_path }}/.config/nvim/init.vim"
        owner: "{{ user.username }}"
        group: "{{ group_name }}"
        state: link

    - name: link tmux config
      ansible.builtin.file:
        src: "{{ home_path }}/devel/repos/dotfiles/.tmux.conf"
        dest: "{{ home_path }}/.tmux.conf"
        owner: "{{ user.username }}"
        group: "{{ group_name }}"
        state: link

    - name: link zsh config
      ansible.builtin.file:
        src: "{{ home_path }}/devel/repos/dotfiles/.zshrc"
        dest: "{{ home_path }}/.zshrc"
        owner: "{{ user.username }}"
        group: "{{ group_name }}"
        state: link
        force: yes
